
import googlemaps
import pandas as pd
import time
import tkinter as tk
from tkinter import ttk, messagebox
import threading
import os

# === –ù–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ) ===
blacklist = [
    "–∫–æ–ø–∏—Ü–µ–Ω—Ç—Ä", "–ø–µ—á–∞—Ç—å", "—Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏—è", "ultraprint",
    "–∞–ø—Ç–µ–∫–∞", "–∫–∞—Ñ–µ", "–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è", "–ø—Ä–∏–Ω—Ç–µ—Ä", "notary", "–Ω–æ—Ç–∞—Ä–∏—É—Å"
]


# === –°–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π –£–∫—Ä–∞–∏–Ω—ã ===
ukrainian_regions = [
   "–í–∏–Ω–Ω–∏—Ü–∫–∞—è", "–í–æ–ª—ã–Ω—Å–∫–∞—è", "–î–Ω–µ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å–∫–∞—è", "–î–æ–Ω–µ—Ü–∫–∞—è", "–ñ–∏—Ç–æ–º–∏—Ä—Å–∫–∞—è", "–ó–∞–∫–∞—Ä–ø–∞—Ç—Å–∫–∞—è",
   "–ó–∞–ø–æ—Ä–æ–∂—Å–∫–∞—è", "–ò–≤–∞–Ω–æ-—Ñ—Ä–∞–Ω–∫–æ–≤—Å–∫–∞—è", "–ö–∏–µ–≤—Å–∫–∞—è", "–ö–∏—Ä–æ–≤–æ–≥—Ä–∞–¥—Å–∫–∞—è", "–õ—É–≥–∞–Ω—Å–∫–∞—è",
   "–õ—å–≤–æ–≤—Å–∫–∞—è", "–ù–∏–∫–æ–ª–∞–µ–≤—Å–∫–∞—è", "–û–¥–µ—Å—Å–∫–∞—è", "–ü–æ–ª—Ç–∞–≤—Å–∫–∞—è", "–†–æ–≤–µ–Ω—Å–∫–∞—è", "–°—É–º—Å–∫–∞—è",
   "–¢–µ—Ä–Ω–æ–ø–æ–ª—å—Å–∫–∞—è", "–•–∞—Ä—å–∫–æ–≤—Å–∫–∞—è", "–•–µ—Ä—Å–æ–Ω—Å–∫–∞—è", "–•–º–µ–ª—å–Ω–∏—Ü–∫–∞—è", "–ß–µ—Ä–∫–∞—Å—Å–∫–∞—è",
   "–ß–µ—Ä–Ω–∏–≥–æ–≤—Å–∫–∞—è", "–ß–µ—Ä–Ω–æ–≤–∏—Ü–∫–∞—è"
]


# === –ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ ===
def load_api_key(filename="apikey.txt"):
    try:
        with open(filename, "r") as file:
            return file.read().strip()
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å API –∫–ª—é—á:\n{e}")
        return None


# === –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ===
def save_dataframe_safely(df, filename_base):
    name, ext = os.path.splitext(filename_base)
    i = 1
    filename = filename_base
    while True:
        try:
            df.to_excel(filename, index=False)
            return filename
        except PermissionError:
            filename = f"{name} ({i}){ext}"
            i += 1


# === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
def setting_strings():

    full_input = label_value.cget("text")
    main_input = entry.get().strip()
    user_input = entry_alter.get().strip()
    isCorrect = False

    query=""
    first, second = modify_main_input(full_input, f"{region_combobox.get()}")
    region = region_combobox.get()

    if first == "–°–¢–û –≤":
        city, detail = modify_main_input(main_input, ",")
        file = f"–°–¢–û {region}_{city}_{detail}.xlsx"
        geocode_query = f"{city}, {region}, –£–∫—Ä–∞–∏–Ω–∞"

        if detail:
            query = f"–°–¢–û –≤ {region} {city} {detail}"
            isCorrect = True


        return geocode_query, query, file, isCorrect

    else:
        query = user_input
        isCorrect = True
        file = f"{query}.xlsx"
        geocode_query = f"{region}, –£–∫—Ä–∞–∏–Ω–∞"
        return geocode_query, query, file, isCorrect

def modify_main_input(main_text, middler):
    parts = [p.strip() for p in main_text.split(middler)]
    if len(parts) >= 2:
        city = f"{middler} ".join(parts[:-1])  # –≤—Å—ë –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
        detail = parts[-1]
    else:
        detail = ""
        city = parts[0] if parts else ""
    return city, detail


# === –û—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏ —Å —Ñ–∞–π–ª–æ–º ===
def open_fileway(filename):
    # –ï—Å–ª–∏ —Ñ–ª–∞–∂–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ —Å —Ñ–∞–π–ª–æ–º
    if show_way.get():
        try:
            abs_path = os.path.abspath(filename)
            os.startfile(os.path.dirname(abs_path))  # –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–æ–º
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≤–æ–¥–Ω–∏–∫:\n{e}")


# === –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ ===
def start_search():
    thread = threading.Thread(target=search_places)
    thread.start()

def search_places():

    location_query, query, filename, isGood = setting_strings()

    if not isGood:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∏–¥ —Å—Ç—Ä–æ–∫–∏")
        return

    proceed = messagebox.askokcancel("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ {query}?")
    if not proceed:
        return

    all_places = []
    next_page_token = None

    try:

        # –ì–µ–æ–∫–æ–¥–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥
        geocode_result = gmaps.geocode(location_query)

        if not geocode_result:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞/—Ä–∞–π–æ–Ω–∞")
            return

        location = geocode_result[0]['geometry']['location']
        latlng = (location['lat'], location['lng'])


        while True:
            if next_page_token:
                places = gmaps.places(query=query, location=latlng, page_token=next_page_token, language="ru")

            else:
                places = gmaps.places(query=query, location=latlng, language="ru")

            results = [place for place in places.get('results', []) if is_relevant_place(place)]

            for place in results:
                name = place.get('name')
                rating = place.get('rating')
                place_id = place['place_id']

                details = gmaps.place(place_id=place_id, language="ru")

                result = details.get('result', {})
                business_status = result.get("business_status", "UNKNOWN")

                location = result.get('geometry', {}).get('location', {})
                lat = location.get('lat')
                lng = location.get('lng')

                all_places.append({
                    "–ù–∞–∑–≤–∞–Ω–∏–µ": name,
                    "–ê–¥—Ä–µ—Å": result.get('formatted_address', ''),
                    "–¢–µ–ª–µ—Ñ–æ–Ω": result.get('formatted_phone_number', ''),
                    "–°–∞–π—Ç": result.get('website', ''),
                    "–†–µ–π—Ç–∏–Ω–≥": rating,
                    "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É": f"https://www.google.com.ua/maps/place/{lat},{lng}",
                    "–®–∏—Ä–æ—Ç–∞": lat,
                    "–î–æ–ª–≥–æ—Ç–∞":lng,
                    "–°—Ç–∞—Ç—É—Å": (
                        "–†–∞–±–æ—Ç–∞–µ—Ç" if business_status == "OPERATIONAL"
                        else "–í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ" if business_status == "CLOSED_TEMPORARILY"
                        else "–ó–∞–∫—Ä—ã—Ç–æ –Ω–∞–≤—Å–µ–≥–¥–∞" if business_status == "CLOSED_PERMANENTLY"
                        else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    ),

                })

            next_page_token = places.get('next_page_token')
            if not next_page_token:
                break
            else:
                time.sleep(2)

        if all_places:
            df = pd.DataFrame(all_places)
            saved_filename = save_dataframe_safely(df, filename)

            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–ù–∞–π–¥–µ–Ω–æ {len(all_places)} –°–¢–û.\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª:\n{saved_filename}")

            open_fileway(saved_filename)


        else:
            messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç", "–°–¢–û –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:\n{e}")

def is_relevant_place(place):
    name = place.get("name", "").lower()
    types = [t.lower() for t in place.get("types", [])]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∏ —Ç–∏–ø–∞–º
    for bad_word in blacklist:
        if bad_word in name:
            return False
        if any(bad_word in t for t in types):
            return False

    return True

# üîë –¢–≤–æ–π –∫–ª—é—á API
API_KEY = load_api_key()
if API_KEY is None:
    exit()  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª—é—á, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
gmaps = googlemaps.Client(key=API_KEY)



# üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å

# === –ê–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ ===
def set_placeholder(entry_widget, placeholder_text):
    entry_widget.insert(0, placeholder_text)
    entry_widget.config(fg='grey')
main_placeholder_active = True
alt_placeholder_active = True
last = "main"

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—è–º–∏ –≤–≤–æ–¥–∞ ===
def on_main_entry_click(event):
    global last, main_placeholder_active
    last = "main"
    if main_placeholder_active:
        entry.delete(0, tk.END)
        entry.config(fg='black')
        main_placeholder_active = False

    entry_alter.unbind("<KeyRelease>")
    label_value.config(text = f"–°–¢–û –≤ {region_combobox.get()} {entry.get().strip()}")
    entry.bind("<KeyRelease>", on_main_typing)

def select_region(event):
    global last
    match last:
        case "main":
            label_value.config(text=f"–°–¢–û –≤ {region_combobox.get()} {entry.get().strip()}")
        case "alter":
            label_value.config(text=f"{region_combobox.get()} {entry_alter.get().strip()}")

def on_alt_entry_click(event):
    global last, alt_placeholder_active
    last = "alter"
    if alt_placeholder_active:
        entry_alter.delete(0, tk.END)
        entry_alter.config(fg='black')
        alt_placeholder_active = False

    entry.unbind("<KeyRelease>")
    label_value.config(text = f"{region_combobox.get()} {entry_alter.get().strip()}")
    entry_alter.bind("<KeyRelease>", on_alt_typing)

def on_main_typing(event):
    label_value.config(text=f"–°–¢–û –≤ {region_combobox.get()} {entry.get().strip()}")

def on_alt_typing(event):
    label_value.config(text=f"{region_combobox.get()} {entry_alter.get().strip()}")


# === –û–∫–Ω–æ ===

root = tk.Tk()
root.title("–ü–æ–∏—Å–∫ –°–¢–û –≤ —Ä–µ–≥–∏–æ–Ω–µ")
root.geometry("500x420")
root.minsize(500, 420)


# === –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ ===

first_frame = tk.LabelFrame(
    root,
    text="1 –í—ã–±–æ—Ä –æ–±–ª–∞—Å—Ç–∏",
    font=("Arial", 10, "bold"))
first_frame.pack(
    padx=50,
    pady=5,
    fill="both")

selected_region = tk.StringVar()
region_combobox = ttk.Combobox(
    first_frame,
    textvariable=selected_region,
    values=ukrainian_regions,
    font=("Arial", 12),
    width=35,
    state="readonly")
region_combobox.current(0)
region_combobox.pack(
    pady=(10,20),
    padx=10
)

second_frame = tk.LabelFrame(
    root,
    text="2 –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –∏ —Ä–∞–π–æ–Ω–∞",
    font=("Arial", 10, "bold"))
second_frame.pack(
    padx=50,
    pady=(28,0),
    fill="both")

entry = tk.Entry(
    second_frame,
    font=("Arial", 12),
    width=37)
entry.pack(pady=(10,20))

ENTRY_MAIN_PLACEHOLDER = "–í–∏–Ω–Ω–∏—Ü–∞, –ó–∞–º–æ—Å—Ç—è–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω"
set_placeholder(entry, ENTRY_MAIN_PLACEHOLDER)


# === –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –±–ª–æ–∫ ===

alt_frame = tk.LabelFrame(
    root,
    text="–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –ø–æ–∏—Å–∫",
    font=("Arial", 10, "bold"))
alt_frame.pack(
    padx=50,
    pady=10,
    fill="both")

entry_alter = tk.Entry(
    alt_frame,
    font=("Arial", 12),
    width=37)
entry_alter.pack(pady=(10,20))

ENTRY_ALTER_PLACEHOLDER = "–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å –í–∏–Ω–Ω–∏—Ü–∞ –í–∏–Ω–Ω–∏—Ü–∫–∏–µ —Ö—É—Ç–æ—Ä–∞"
set_placeholder(entry_alter, ENTRY_ALTER_PLACEHOLDER)


# === –¢–µ–∫—É—â–∞—è —Å—Ç–æ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞ ===

label_name = tk.Label(
    root,
    text="–ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞:",
    font=("Arial", 10, "bold"))
label_name.pack(
    anchor="w",
    padx=(48,0))

label_value = tk.Label(
    root,
    text = f"–°–¢–û –≤ {region_combobox.get()} {ENTRY_MAIN_PLACEHOLDER}",
    font=("Arial", 10,))
label_value.pack(
    anchor="w",
    padx=(48,0))


entry.bind("<Button-1>", on_main_entry_click)
entry_alter.bind("<Button-1>", on_alt_entry_click)
region_combobox.bind("<<ComboboxSelected>>", select_region)


# === –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ ===

search_button = tk.Button(
    root,
    text="–ò—Å–∫–∞—Ç—å",
    font=("Arial", 12),
    width=8,
    bg="#E0E0E0",
    activebackground="#B3D9FF",
    command=start_search)
search_button.pack(pady=(10,0))


# === –ß–µ–∫–±–æ–∫—Å ===

show_way = tk.BooleanVar()
checkbox = tk.Checkbutton(
    root,
    text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
    variable=show_way,
    font=("Arial", 10),
    anchor="w",
    justify="left"
)
checkbox.pack(
    side="bottom",
    anchor="sw",
    pady=(0,15),
    padx=(45,0))


# === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–∫–Ω–∞ = –ó–∞–ø—É—Å–∫ ===

root.mainloop()


